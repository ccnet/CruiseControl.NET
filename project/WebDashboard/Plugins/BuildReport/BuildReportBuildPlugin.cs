using Exortech.NetReflector;
using ThoughtWorks.CruiseControl.WebDashboard.Dashboard;
using ThoughtWorks.CruiseControl.WebDashboard.Dashboard.Actions;
using ThoughtWorks.CruiseControl.WebDashboard.Dashboard.GenericPlugins;

namespace ThoughtWorks.CruiseControl.WebDashboard.Plugins.BuildReport
{
	// ToDo - Refactor to inherit from XslMultiReportBuildPlugin at some point

    /// <summary>
    /// Shows an overview of the build. This overview is generated by using xslt transformations over the build log.
    /// These xslt transformations can be changed at will via the xslFileNames property.
    /// <para>
    /// Handy information : modifications, compile warnings or errors, amount of tests ok or failed, ...
    /// </para>
    /// <para>
    /// LinkDescription : Build Report
    /// </para>
    /// <example>
    /// <code>
    /// &lt;buildReportBuildPlugin&gt;
    /// &lt;xslFileNames&gt;
    /// &lt;xslFile&gt;xsl\header.xsl&lt;/xslFile&gt;
    /// &lt;xslFile&gt;xsl\modifications.xsl&lt;/xslFile&gt;
    /// &lt;xslFile&gt;xsl\unittests.xsl&lt;/xslFile&gt;
    /// &lt;xslFile&gt;xsl\MsTestSummary2008.xsl&lt;/xslFile&gt;
    /// &lt;xslFile&gt;xsl\compile-msbuild.xsl&lt;/xslFile&gt;
    /// &lt;xslFile&gt;xsl\SimianSummary.xsl&lt;/xslFile&gt;
    /// &lt;/xslFileNames&gt;
    /// &lt;/buildReportBuildPlugin&gt;
    /// </code>
    /// </example>
    /// </summary>
    /// <title>Build Report Plugin</title>
	[ReflectorType("buildReportBuildPlugin")]
	public class BuildReportBuildPlugin : ProjectConfigurableBuildPlugin
	{
		public static readonly string ACTION_NAME = "ViewBuildReport";
		private readonly IActionInstantiator actionInstantiator;

		public BuildReportBuildPlugin(IActionInstantiator actionInstantiator)
		{
			this.actionInstantiator = actionInstantiator;
		}

		public override string LinkDescription
		{
			get { return "Build Report"; }
		}

        /// <summary>
        /// The xsl files to use to transform the build log. Location is relative to the web.config file.
        /// Standard installation places the xsl files in the xsl folder.
        /// </summary>
        /// <default>
        /// &lt;xslFileNames&gt;
        /// &lt;xslFile&gt;xsl\header.xsl&lt;/xslFile&gt;
        /// &lt;xslFile&gt;xsl\modifications.xsl&lt;/xslFile&gt;
        /// &lt;/xslFileNames&gt;
        /// </default>
        /// <version>1.0</version>
        [ReflectorProperty("xslFileNames", typeof(BuildReportXslFilenameSerialiserFactory))]
        public BuildReportXslFilename[] XslFileNames { get; set; }

		public override INamedAction[] NamedActions
		{
			get
			{
				MultipleXslReportBuildAction buildAction = (MultipleXslReportBuildAction) actionInstantiator.InstantiateAction(typeof (MultipleXslReportBuildAction));
				buildAction.XslFileNames = this.XslFileNames;
				return new INamedAction[] {new ImmutableNamedAction(ACTION_NAME, buildAction)};
			}
		}
	}
}