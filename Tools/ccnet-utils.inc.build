<?xml version="1.0" encoding="utf-8"?>

<project name="CruiseControl.NET" xmlns="http://nant.sourceforge.net/release/0.92/nant.xsd">

	<target name="cleanupDocsDictionary" description="Delete all files in the docs dictionary.">

		<delete includeemptydirs="false" verbose="${nant.verbosity}">
			<fileset basedir="${path::get-full-path('doc')}" defaultexcludes="true">
				<include name="CCNET/**"  />
			</fileset>
		</delete>

	</target>

	<!--***********************************
        Determines the path to MSBuild based on the same logic as NuGet (see NuGetClient.CommandLine.MsBuildUtility)
        *********************************** -->
	<script language="C#" prefix="framework">
		<references>
			<include name="System.dll" />
			<include name="System.Collections.dll" />
		</references>
		<imports>
			<import namespace="System.Diagnostics" />
			<import namespace="System.Collections.Generic" />
		</imports>
        <code>
            <![CDATA[
              [Function("get-msbuild-path")]
              public static string getMSBuildPath(string vswherePath)
              {
                string msBuildPath = string.Empty;

                try
                {
                    var platform = (int)Environment.OSVersion.Platform;

                    var isLinux = platform == 4;
					var isWindows = (platform != 4) && (platform != 6) && (platform != 128);

                    var isMono = Type.GetType("Mono.Runtime") != null;
                    
					if(isLinux && isMono)
                    {
                        var libPath = Path.GetDirectoryName(typeof(object).Assembly.Location);
                        //path to msbuild folder is /usr/lib/mono/msbuild
                        //path to xbuild folder is /usr/lib/mono/xbuild
                        string[] buildExecutables = new string[4]{
                            Path.Combine(libPath, "..", "msbuild", "15.0", "bin", "MSBuild.dll"),
                            Path.Combine(libPath, "..", "msbuild", "14.1", "bin", "MSBuild.dll"),
                            Path.Combine(libPath, "..", "xbuild", "14.0", "bin", "xbuild.exe"),
                            Path.Combine(libPath, "..", "xbuild", "12.0", "bin", "xbuild.exe")
                        };
                        foreach(var buildExe in buildExecutables)
                        {
                            if(File.Exists(buildExe))
                            {
                                msBuildPath = buildExe;
                                break;
                            }
                        }
                    }

					if(isWindows)
					{
						List<string> buildExecutables = new List<string>();

						if(File.Exists(vswherePath))
						{
							Process process = null;
							try
							{
								using (process = new Process())
								{
									process.StartInfo.FileName = vswherePath;
									process.StartInfo.Arguments = @" -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe";
									process.StartInfo.CreateNoWindow = true;
									process.StartInfo.UseShellExecute = false;
									process.StartInfo.RedirectStandardOutput = true;
									process.StartInfo.RedirectStandardError = true;
									process.Start();
								
									string output = process.StandardOutput.ReadToEnd();
									Console.WriteLine("Detected MSBuild: " + output);
									
									string error = process.StandardError.ReadToEnd();
									Console.WriteLine("Error: " + error);
										
									process.WaitForExit();

									if(!string.IsNullOrEmpty(output))
									{
										buildExecutables.Add(output.Replace(Environment.NewLine, ""));
									}
								}
							}
							catch (Exception e)
							{
								Console.WriteLine(e.Message);
							}
						}
						else
						{
							Console.WriteLine("Path to vswhere is invalid. Checking for MSBuild 14, 12 and 4.0, in this order.");
						}

						string framework40 = Environment.Is64BitOperatingSystem
													? "Framework64"
													: "Framework";

						buildExecutables.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "MSBuild", "14.0", "Bin", "MSBuild.exe"));
						buildExecutables.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "MSBuild", "12.0", "Bin", "MSBuild.exe"));
						buildExecutables.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Windows), "Microsoft.NET", framework40, "v4.0.30319", "MSBuild.exe"));

						foreach(string path in buildExecutables)
						{
							if(File.Exists(path))
							{
								msBuildPath = path;
								break;
							}
						}
					}
                }
                catch(Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }

                return msBuildPath;
              }
            ]]>
        </code>
    </script>

</project>